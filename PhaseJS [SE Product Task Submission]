<!doctype html> 
<html lang="en"> 
<head> 
    <meta charset="UTF-8" />
    <title>Making your first Phaser 3 Game - Part 1</title>
    <script src="//cdn.jsdelivr.net/npm/phaser@3.11.0/dist/phaser.js"></script>
    <style type="text/css">
        body {
            margin: 0;
        }
    </style>
</head>
<body>

<script type="text/javascript">

    var config = {
        type: Phaser.AUTO,
        width: 640,
        height: 640,
        parent: "game-container",
          pixelArt: true, //for refined pixels
          physics: {
            default: "arcade", //enable arcade mode
            arcade: {
              gravity: { y: 0 } //setting gravity 0
            }
          },
          scene: {
            preload: preload,
            create: create,
            update: update,
            render: render
          }
    };

    var game = new Phaser.Game(config);

    let cursors;
    let player;
    let coin;
    let worldLayer;
    var total_coins_collected=0;
    let score_text;
    var total_score=0;

    function preload (){

        this.load.image("tiles", "assets/sokoban_tilesheet.png");   //Load tilesheet used in Tiled.
        this.load.tilemapTiledJSON("map", "assets/task-1.json");    //Load json map created in Tiled.
        this.load.image('coin', 'assets/environment_11.png');       //Load Coin img.
        this.load.image('player', 'assets/player_05.png');          //Load User img.
    }

    function create (){

        // Parameters are the name you gave the tileset in Tiled and then the key of the tileset image in
        // Phaser's cache (i.e. the name you used in preload)

        const map = this.make.tilemap({key : "map"});
        const tileset = map.addTilesetImage("sokoban_tilesheet", "tiles");

        // Parameters: layer name (or index) from Tiled, tileset, x, y
        const grass = map.createStaticLayer("grass", tileset, 0, 0);
        const wall = map.createStaticLayer("wall", tileset, 0, 0);

        coins = this.add.group();
        map.setCollisionBetween(1, 100, true, 'wall');


        //Find object in map by Objectname & creating sprites & addning them on map.
        const spawnPoint = map.findObject("object", obj => obj.name === "spawn");
        player = this.physics.add.sprite(spawnPoint.x, spawnPoint.y, "player");

        const endPoint = map.findObject("object", obj => obj.name === "end");
        coin = this.physics.add.sprite(544, 32, "coin");
        coins.add(coin);

        coin2 = this.physics.add.sprite(477, 221, "coin");
        coins.add(coin2);

        coin3 = this.physics.add.sprite(32, 288, "coin");
        coins.add(coin3);

        coin4 = this.physics.add.sprite(160, 350, "coin");
        coins.add(coin4);

        coin5 = this.physics.add.sprite(32, 32, "coin");
        coins.add(coin5);

        coin6 = this.physics.add.sprite(288, 605, "coin");
        coins.add(coin6);


        // coin.body.immovable = true;             //coin should not move
        // coin.enableBody = true;                 //enable body collision.
        player.body.collideWorldBounds = true;  //Player can collide with the world.

        

        this.physics.add.collider(player, wall);                        //Add Collision b/w player & the wall.
        this.physics.add.overlap(player, coins, success, null, this);   //When player & coins overlap call the function succes.


        cursors = this.input.keyboard.createCursorKeys();   //Create instance of Cursors.

        score_text = this.add.text(270, 10, "'$"+total_score+" found'", {
                fill : 'white',
                bold : true,
                font : '30px Calibri'
            });


    }

    function update (){

        //player movement
        player.body.velocity.y = 0;
        player.body.velocity.x = 0;
     
        if(cursors.up.isDown) {
          player.body.velocity.y -= 164;
        }
        else if(cursors.down.isDown) {
          player.body.velocity.y += 164;
        }
        if(cursors.left.isDown) {
          player.body.velocity.x -= 164;
        }
        else if(cursors.right.isDown) {
          player.body.velocity.x += 164;
        }

    }

    function render(){

        // game.debug.bodyInfo(player, 16, 24);

        // game.debug.body(sprite);
        // game.debug.body(sprite2);

    }

    function success (player, coin){

        coin.destroy();


        // this.physics.pause();

        // player.setTint(0xff0000);

        // score = this.add.text(200, 288, '"$2 found"', {
        //         fill : 'white',
        //         bold : true,
        //         font : '60px Calibri'
        //     });

        total_score+=2;
        score_text.destroy();
        score_text = this.add.text(270, 10, "'$"+total_score+" found'", {
                fill : 'white',
                bold : true,
                font : '30px Calibri'
            });

        // this.time.addEvent(2000,remove_text,this);

        console.log("'$2 found'");

        total_coins_collected+=1;
        if(total_coins_collected==6){

            player.setTint(0xff0000);
            alert("GAME OVER!");

            score = this.add.text(140, 288, '"GAME OVER"', {
                fill : 'white',
                bold : true,
                font : '60px Calibri'
            });
            this.physics.pause();   
        }

    }

    function remove_text(n){
        n.score.destroy();
    }

</script>

</body>
</html>
